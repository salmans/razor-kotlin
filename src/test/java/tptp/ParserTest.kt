package tptp

import formula.*
import org.junit.Test
import kotlin.test.assertEquals

class TokenizerTest {
    @Test
    fun tokenize() {
        assertEquals(listOf(token(TokenType.NOT, "~", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("~"))
        assertEquals(listOf(token(TokenType.NAND, "~&", 1, 1)
                , token(TokenType.END, "end of input", 1, 3)), tokenize("~&"))
        assertEquals(listOf(token(TokenType.NOR, "~|", 1, 1)
                , token(TokenType.END, "end of input", 1, 3)), tokenize("~|"))
        assertEquals(listOf(token(TokenType.IMPLIES, "=>", 1, 1)
                , token(TokenType.END, "end of input", 1, 3)), tokenize("=>"))
        assertEquals(listOf(token(TokenType.IMPLIED, "<=", 1, 1)
                , token(TokenType.END, "end of input", 1, 3)), tokenize("<="))
        assertEquals(listOf(token(TokenType.IFF, "<=>", 1, 1)
                , token(TokenType.END, "end of input", 1, 4)), tokenize("<=>"))
        assertEquals(listOf(token(TokenType.IFF, "<->", 1, 1)
                , token(TokenType.END, "end of input", 1, 4)), tokenize("<->"))
        assertEquals(listOf(token(TokenType.BANG, "!", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("!"))
        assertEquals(listOf(token(TokenType.NOT_EQUALS, "!=", 1, 1)
                , token(TokenType.END, "end of input", 1, 3)), tokenize("!="))
        assertEquals(listOf(token(TokenType.QMARK, "?", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("?"))
        assertEquals(listOf(token(TokenType.DECIMAL, "0", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("0"))
        assertEquals(listOf(token(TokenType.DECIMAL, "0", 1, 1)
                , token(TokenType.DECIMAL, "1", 1, 2)
                , token(TokenType.END, "end of input", 1, 3)), tokenize("01"))
        assertEquals(listOf(token(TokenType.DECIMAL, "1", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("1"))
        assertEquals(listOf(token(TokenType.DECIMAL, "12345", 1, 1)
                , token(TokenType.END, "end of input", 1, 6)), tokenize("12345"))
        assertEquals(listOf(token(TokenType.DECIMAL, "0", 1, 1)
                , token(TokenType.DECIMAL_FRACTION, "1.0", 1, 2)
                , token(TokenType.END, "end of input", 1, 5)), tokenize("01.0"))
        assertEquals(listOf(token(TokenType.DECIMAL_FRACTION, "0.0", 1, 1)
                , token(TokenType.END, "end of input", 1, 4)), tokenize("0.0"))
        assertEquals(listOf(token(TokenType.DECIMAL_FRACTION, "0.01", 1, 1)
                , token(TokenType.END, "end of input", 1, 5)), tokenize("0.01"))
        assertEquals(listOf(token(TokenType.DECIMAL_FRACTION, "12.1", 1, 1)
                , token(TokenType.END, "end of input", 1, 5)), tokenize("12.1"))
        assertEquals(listOf(token(TokenType.DECIMAL_FRACTION, "1.12345", 1, 1)
                , token(TokenType.END, "end of input", 1, 8)), tokenize("1.12345"))
        assertEquals(listOf(token(TokenType.UPPER_WORD, "E0", 1, 1)
                , token(TokenType.END, "end of input", 1, 3)), tokenize("E0"))
        assertEquals(listOf(token(TokenType.LOWER_WORD, "e0", 1, 1)
                , token(TokenType.END, "end of input", 1, 3)), tokenize("e0"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0E0", 1, 1)
                , token(TokenType.END, "end of input", 1, 4)), tokenize("0E0"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "12E0", 1, 1)
                , token(TokenType.END, "end of input", 1, 5)), tokenize("12E0"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0.2E0", 1, 1)
                , token(TokenType.END, "end of input", 1, 6)), tokenize("0.2E0"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0E10", 1, 1)
                , token(TokenType.END, "end of input", 1, 5)), tokenize("0E10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "12E10", 1, 1)
                , token(TokenType.END, "end of input", 1, 6)), tokenize("12E10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0.2E10", 1, 1)
                , token(TokenType.END, "end of input", 1, 7)), tokenize("0.2E10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0E+10", 1, 1)
                , token(TokenType.END, "end of input", 1, 6)), tokenize("0E+10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "12E+10", 1, 1)
                , token(TokenType.END, "end of input", 1, 7)), tokenize("12E+10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0.2E+10", 1, 1)
                , token(TokenType.END, "end of input", 1, 8)), tokenize("0.2E+10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0E-10", 1, 1)
                , token(TokenType.END, "end of input", 1, 6)), tokenize("0E-10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "12E-10", 1, 1)
                , token(TokenType.END, "end of input", 1, 7)), tokenize("12E-10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0.2E-10", 1, 1)
                , token(TokenType.END, "end of input", 1, 8)), tokenize("0.2E-10"))
        assertEquals(listOf(token(TokenType.DECIMAL_EXPONENT, "0E01", 1, 1)
                , token(TokenType.END, "end of input", 1, 5)), tokenize("0E01"))
        assertEquals(listOf(token(TokenType.UNSIGNED_RATIONAL, "0/1", 1, 1)
                , token(TokenType.END, "end of input", 1, 4)), tokenize("0/1"))
        assertEquals(listOf(token(TokenType.UNSIGNED_RATIONAL, "0/10", 1, 1)
                , token(TokenType.END, "end of input", 1, 5)), tokenize("0/10"))
        assertEquals(listOf(token(TokenType.UNSIGNED_RATIONAL, "10/10", 1, 1)
                , token(TokenType.END, "end of input", 1, 6)), tokenize("10/10"))
        assertEquals(listOf(token(TokenType.EQUALS, "=", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("="))
        assertEquals(listOf(token(TokenType.OR, "|", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("|"))
        assertEquals(listOf(token(TokenType.AND, "&", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("&"))
        assertEquals(listOf(token(TokenType.STAR, "*", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("*"))
        assertEquals(listOf(token(TokenType.LESS_SIGN, "<", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("<"))
        assertEquals(listOf(token(TokenType.ARROW, ">", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize(">"))
        assertEquals(listOf(token(TokenType.GENTZEN_ARROW, "-->", 1, 1)
                , token(TokenType.END, "end of input", 1, 4)), tokenize("-->"))
        assertEquals(listOf(token(TokenType.LPAREN, "(", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("("))
        assertEquals(listOf(token(TokenType.RPAREN, ")", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize(")"))
        assertEquals(listOf(token(TokenType.LBRACKET, "[", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("["))
        assertEquals(listOf(token(TokenType.RBRACKET, "]", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("]"))
        assertEquals(listOf(token(TokenType.PLUS, "+", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("+"))
        assertEquals(listOf(token(TokenType.MINUS, "-", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("-"))
        assertEquals(listOf(token(TokenType.COMMA, ",", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize(","))
        assertEquals(listOf(token(TokenType.DOT, ".", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("."))
        assertEquals(listOf(token(TokenType.COLON, ":", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize(":"))
        assertEquals(listOf(token(TokenType.DOLLAR_DOLLAR_WORD, "\$\$test", 1, 1)
                , token(TokenType.END, "end of input", 1, 7)), tokenize("\$\$test"))
        assertEquals(listOf(token(TokenType.DOLLAR_WORD, "\$test", 1, 1)
                , token(TokenType.END, "end of input", 1, 6)), tokenize("\$test"))
        assertEquals(listOf(token(TokenType.FOF, "fof", 1, 1)
                , token(TokenType.END, "end of input", 1, 4)), tokenize("fof"))
        assertEquals(listOf(token(TokenType.DOLLAR_FOF, "\$fof", 1, 1)
                , token(TokenType.END, "end of input", 1, 5)), tokenize("\$fof"))
        assertEquals(listOf(token(TokenType.UNKNOWN, "unknown", 1, 1)
                , token(TokenType.END, "end of input", 1, 8)), tokenize("unknown"))
        assertEquals(listOf(token(TokenType.INTRODUCED, "introduced", 1, 1)
                , token(TokenType.END, "end of input", 1, 11)), tokenize("introduced"))
        assertEquals(listOf(token(TokenType.LOWER_WORD, "x", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("x"))
        assertEquals(listOf(token(TokenType.LOWER_WORD, "xTest0x", 1, 1)
                , token(TokenType.END, "end of input", 1, 8)), tokenize("xTest0x"))
        assertEquals(listOf(token(TokenType.UPPER_WORD, "X", 1, 1)
                , token(TokenType.END, "end of input", 1, 2)), tokenize("X"))
        assertEquals(listOf(token(TokenType.UPPER_WORD, "Xtest0X", 1, 1)
                , token(TokenType.END, "end of input", 1, 8)), tokenize("Xtest0X"))
        assertEquals(listOf(token(TokenType.END, "end of input", 1, 9)), tokenize("%comment"))
        assertEquals(listOf(token(TokenType.END, "end of input", 1, 12)), tokenize("/*comment*/"))
        assertEquals(listOf(token(TokenType.SINGLE_QUOTED, "'te(st'", 1, 1)
                , token(TokenType.END, "end of input", 1, 8)), tokenize("'te(st'"))
    }

    @Test
    fun parse() {
        assertTheoriesEqual(TRUE
                , actual = parse("fof(true, axiom, \$true)."))
        assertTheoriesEqual(FALSE
                , actual = parse("fof(false, axiom, \$false)."))
        assertTheoriesEqual(TRUE
                , actual = parse("fof(true, axiom, ((((\$true)))))."))
//        assertTheoriesEqual(P()
//                , actual = parse("P()"))
//        assertTheoriesEqual(P(x)
//                , actual = parse("P(x)"))
//        assertTheoriesEqual(P(a)
//                , actual = parse("P('a)"))
//        assertTheoriesEqual(P(x, y)
//                , actual = parse("P(x,y)"))
//        assertTheoriesEqual(P(a, b)
//                , actual = parse("P('a,'b)"))
//        assertTheoriesEqual(P(a, x)
//                , actual = parse("P('a,x)"))
//        assertTheoriesEqual(P(x, y)
//                , actual = parse("P(x, y)"))
//        assertTheoriesEqual(P(x, y)
//                , actual = parse("P(x,            y     \n)"))
    }
}